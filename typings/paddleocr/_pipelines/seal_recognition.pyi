"""
This type stub file was generated by pyright.
"""

from .base import PaddleXPipelineWrapper, PipelineCLISubcommandExecutor

class SealRecognition(PaddleXPipelineWrapper):
    def __init__(
        self,
        doc_orientation_classify_model_name=...,
        doc_orientation_classify_model_dir=...,
        doc_unwarping_model_name=...,
        doc_unwarping_model_dir=...,
        layout_detection_model_name=...,
        layout_detection_model_dir=...,
        seal_text_detection_model_name=...,
        seal_text_detection_model_dir=...,
        text_recognition_model_name=...,
        text_recognition_model_dir=...,
        text_recognition_batch_size=...,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        layout_threshold=...,
        layout_nms=...,
        layout_unclip_ratio=...,
        layout_merge_bboxes_mode=...,
        seal_det_limit_side_len=...,
        seal_det_limit_type=...,
        seal_det_thresh=...,
        seal_det_box_thresh=...,
        seal_det_unclip_ratio=...,
        seal_rec_score_thresh=...,
        **kwargs,
    ) -> None: ...
    def predict_iter(
        self,
        input,
        *,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        layout_det_res=...,
        layout_threshold=...,
        layout_nms=...,
        layout_unclip_ratio=...,
        layout_merge_bboxes_mode=...,
        seal_det_limit_side_len=...,
        seal_det_limit_type=...,
        seal_det_thresh=...,
        seal_det_box_thresh=...,
        seal_det_unclip_ratio=...,
        seal_rec_score_thresh=...,
        **kwargs,
    ): ...
    def predict(
        self,
        input,
        *,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        layout_det_res=...,
        layout_threshold=...,
        layout_nms=...,
        layout_unclip_ratio=...,
        layout_merge_bboxes_mode=...,
        seal_det_limit_side_len=...,
        seal_det_limit_type=...,
        seal_det_thresh=...,
        seal_det_box_thresh=...,
        seal_det_unclip_ratio=...,
        seal_rec_score_thresh=...,
        **kwargs,
    ):  # -> list[Any]:
        ...
    @classmethod
    def get_cli_subcommand_executor(cls):  # -> SealRecognitionCLISubcommandExecutor:
        ...

class SealRecognitionCLISubcommandExecutor(PipelineCLISubcommandExecutor):
    @property
    def subparser_name(self):  # -> Literal['seal_recognition']:
        ...
    def execute_with_args(self, args):  # -> None:
        ...
