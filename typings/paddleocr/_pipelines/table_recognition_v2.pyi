"""
This type stub file was generated by pyright.
"""

from .base import PaddleXPipelineWrapper, PipelineCLISubcommandExecutor

class TableRecognitionPipelineV2(PaddleXPipelineWrapper):
    def __init__(
        self,
        layout_detection_model_name=...,
        layout_detection_model_dir=...,
        table_classification_model_name=...,
        table_classification_model_dir=...,
        wired_table_structure_recognition_model_name=...,
        wired_table_structure_recognition_model_dir=...,
        wireless_table_structure_recognition_model_name=...,
        wireless_table_structure_recognition_model_dir=...,
        wired_table_cells_detection_model_name=...,
        wired_table_cells_detection_model_dir=...,
        wireless_table_cells_detection_model_name=...,
        wireless_table_cells_detection_model_dir=...,
        doc_orientation_classify_model_name=...,
        doc_orientation_classify_model_dir=...,
        doc_unwarping_model_name=...,
        doc_unwarping_model_dir=...,
        text_detection_model_name=...,
        text_detection_model_dir=...,
        text_det_limit_side_len=...,
        text_det_limit_type=...,
        text_det_thresh=...,
        text_det_box_thresh=...,
        text_det_unclip_ratio=...,
        text_recognition_model_name=...,
        text_recognition_model_dir=...,
        text_recognition_batch_size=...,
        text_rec_score_thresh=...,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        use_ocr_model=...,
        **kwargs,
    ) -> None: ...
    def predict_iter(
        self,
        input,
        *,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        use_ocr_model=...,
        overall_ocr_res=...,
        layout_det_res=...,
        text_det_limit_side_len=...,
        text_det_limit_type=...,
        text_det_thresh=...,
        text_det_box_thresh=...,
        text_det_unclip_ratio=...,
        text_rec_score_thresh=...,
        use_e2e_wired_table_rec_model=...,
        use_e2e_wireless_table_rec_model=...,
        use_wired_table_cells_trans_to_html=...,
        use_wireless_table_cells_trans_to_html=...,
        use_table_orientation_classify=...,
        use_ocr_results_with_table_cells=...,
        **kwargs,
    ): ...
    def predict(
        self,
        input,
        *,
        use_doc_orientation_classify=...,
        use_doc_unwarping=...,
        use_layout_detection=...,
        use_ocr_model=...,
        overall_ocr_res=...,
        layout_det_res=...,
        text_det_limit_side_len=...,
        text_det_limit_type=...,
        text_det_thresh=...,
        text_det_box_thresh=...,
        text_det_unclip_ratio=...,
        text_rec_score_thresh=...,
        use_e2e_wired_table_rec_model=...,
        use_e2e_wireless_table_rec_model=...,
        use_wired_table_cells_trans_to_html=...,
        use_wireless_table_cells_trans_to_html=...,
        use_table_orientation_classify=...,
        use_ocr_results_with_table_cells=...,
        **kwargs,
    ):  # -> list[Any]:
        ...
    @classmethod
    def get_cli_subcommand_executor(
        cls,
    ):  # -> TableRecognitionPipelineV2CLISubcommandExecutor:
        ...

class TableRecognitionPipelineV2CLISubcommandExecutor(PipelineCLISubcommandExecutor):
    @property
    def subparser_name(self):  # -> Literal['table_recognition_v2']:
        ...
    def execute_with_args(self, args):  # -> None:
        ...
