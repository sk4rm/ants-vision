"""
This type stub file was generated by pyright.
"""

class DriverProxy:
    """
    Proxy to a driver implementation.

    @ivar _module: Module containing the driver implementation
    @type _module: module
    @ivar _engine: Reference to the engine that owns the driver
    @type _engine: L{engine.Engine}
    @ivar _queue: Queue of commands outstanding for the driver
    @type _queue: list
    @ivar _busy: True when the driver is busy processing a command, False when
        not
    @type _busy: bool
    @ivar _name: Name associated with the current utterance
    @type _name: str
    @ivar _debug: Debugging output enabled or not
    @type _debug: bool
    @ivar _iterator: Driver iterator to invoke when in an external run loop
    @type _iterator: iterator
    """
    def __init__(self, engine, driverName: str, debug: bool) -> None:
        """
        Constructor.

        @param engine: Reference to the engine that owns the driver
        @type engine: L{engine.Engine}
        @param driverName: Name of the driver module to use under drivers/
        @type driverName: str
        @param debug: Debugging output enabled or not
        @type debug: bool
        """
        ...
    
    def __del__(self) -> None:
        ...
    
    def notify(self, topic, **kwargs) -> None:
        """
        Sends a notification to the engine from the driver.

        @param topic: Notification topic
        @type topic: str
        @param kwargs: Arbitrary keyword arguments
        @type kwargs: dict
        """
        ...
    
    def setBusy(self, busy) -> None:
        """
        Called by the driver to indicate it is busy.

        @param busy: True when busy, false when idle
        @type busy: bool
        """
        ...
    
    def isBusy(self): # -> bool:
        """
        @return: True if the driver is busy, false if not
        @rtype: bool.
        """
        ...
    
    def say(self, text, name) -> None:
        """
        Called by the engine to push a say command onto the queue.

        @param text: Text to speak
        @type text: unicode
        @param name: Name to associate with the utterance
        @type name: str
        """
        ...
    
    def stop(self) -> None:
        """
        Called by the engine to stop the current utterance and clear the queue
        of commands.
        """
        ...
    
    def save_to_file(self, text, filename, name) -> None:
        """
        Called by the engine to push a say command onto the queue.

        @param text: Text to speak
        @type text: unicode
        @param name: Name to associate with the utterance
        @type name: str
        """
        ...
    
    def getProperty(self, name): # -> Any:
        """
        Called by the engine to get a driver property value.

        @param name: Name of the property
        @type name: str
        @return: Property value
        @rtype: object
        """
        ...
    
    def setProperty(self, name, value) -> None:
        """
        Called by the engine to set a driver property value.

        @param name: Name of the property
        @type name: str
        @param value: Property value
        @type value: object
        """
        ...
    
    def runAndWait(self) -> None:
        """
        Called by the engine to start an event loop, process all commands in
        the queue at the start of the loop, and then exit the loop.
        """
        ...
    
    def startLoop(self, useDriverLoop) -> None:
        """Called by the engine to start an event loop."""
        ...
    
    def endLoop(self, useDriverLoop) -> None:
        """Called by the engine to stop an event loop."""
        ...
    
    def iterate(self) -> None:
        """
        Called by the engine to iterate driver commands and notifications from
        within an external event loop.
        """
        ...
    


